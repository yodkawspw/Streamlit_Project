# Mini_Project.py 
import json
from pathlib import Path
from io import StringIO

import joblib
import pandas as pd
import streamlit as st

st.set_page_config(page_title="‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÇ‡∏≠‡∏°‡∏≤‡∏Å‡∏≤‡πÄ‡∏™‡∏∞", page_icon="üç£", layout="centered")

page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
# background-image: url("https://images.wallpapersden.com/image/download/mountains-in-dark-night_a2hoaG6UmZqaraWkpJRpbGZsrWdubWk.jpg");
background-image: url("https://images.pexels.com/photos/66997/pexels-photo-66997.jpeg");
background-size: cover;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

# ------------------------ STYLE ------------------------
st.markdown(
    """
    <style>
      :root{
        --bg:#ffffff;
        --ink:#0f172a;
        --muted:#64748b;
        --line:#e5e7eb;
        --shadow: 0 8px 24px rgba(2,6,23,.06);
        --accent:#ef4444;           /* ‡πÅ‡∏î‡∏á‡∏ã‡∏≠‡∏ü‡∏ï‡πå */
        --accent-weak:#fef2f2;      /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô */
        --accent-line:#fde2e2;      /* ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô */
        --chip-bg:#f8fafc;
      }
      .block-container { max-width: 1000px; }

      /* HERO */
      .hero {
        background: linear-gradient(135deg, var(--accent-weak) 0%, #fff 60%);
        border: 1px solid var(--accent-line);
        border-radius: 16px;
        padding: 1.1rem 1.2rem;
        box-shadow: var(--shadow);
        margin-bottom: 1.1rem;
      }
      .hero h1 { margin:0; font-size: 2rem; font-weight: 800; color: var(--ink); }
      .subtitle { color:var(--muted); margin-top:.25rem; }

      /* KPI */
      .metric-card {
        background: var(--bg);
        border: 1px solid var(--line);
        border-radius: 14px;
        padding: .9rem 1rem;
        box-shadow: var(--shadow);
        text-align:center;
      }
      .metric-card .label { color:#6b7280; font-weight:600; font-size:.92rem; }
      .metric-card .value { color:#6b7280; font-weight:800; font-size:1.2rem; margin-top:.2rem; }

      /* ===== ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ===== */
      .card{
        background: var(--bg);
        border:1px solid var(--line);
        border-radius:16px;
        padding: 1.15rem 1.2rem;
        box-shadow: var(--shadow);
        margin: 1.25rem 0;
      }
      /* ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (accent ‡∏ã‡πâ‡∏≤‡∏¢) */
      .card-accent { border-left: 6px solid var(--accent); }

      /* divider ‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏≤‡∏á */
      .divider {
        height:1px; background: linear-gradient(90deg, transparent, var(--line), transparent);
        margin: .9rem 0 1rem;
      }

      /* ‡∏ä‡∏¥‡∏õ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå */
      .chips { display:flex; flex-wrap:wrap; gap:.6rem .7rem; margin:.8rem 0 1.1rem; }
      .chip {
        padding:.22rem .7rem; border-radius:999px; background:var(--chip-bg); color:var(--ink);
        border:1px solid var(--line); font-size:.85rem; font-weight:600;
      }

      .section-title { margin:.4rem 0 .5rem; font-weight: 800; font-size:1.05rem; color:#fff; }

      /* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å */
      .stButton > button {
        background: linear-gradient(135deg, #f97316, #ef4444);
        color:#fff; border:0; border-radius:12px; padding:.6rem .9rem; font-weight:800;
        box-shadow: 0 6px 18px rgba(239,68,68,.22);
        transition: transform .06s ease, box-shadow .15s ease, filter .15s ease;
      }
      .stButton > button:hover { transform: translateY(-1px); filter: brightness(1.03);}
      .stButton > button:active { transform: translateY(0); }

      /* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏á */
      .btn-ghost {
        display:inline-block; padding:.55rem .85rem; border-radius:12px; border:1px solid var(--line);
        color:var(--ink); background:#fff; font-weight:700; text-decoration:none;
      }
      .btn-ghost:hover { background:#fafafa; }

      /* Badge Top-3 probability */
      .badges { display:flex; flex-wrap:wrap; gap:.5rem; margin:.4rem 0 .2rem; }
      .badge {
        display:inline-flex; align-items:center; gap:.45rem;
        padding:.28rem .6rem; border-radius:999px; border:1px solid var(--line);
        background:#fff; box-shadow: var(--shadow); font-weight:700;
        color:#111827;
      }
      .badge .dot{ width:.55rem; height:.55rem; border-radius:99px; background: var(--accent); display:inline-block;}
      .hint { color:var(--muted); font-size:.92rem; }

      /* ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞ label widget ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô */
      label[data-testid="stWidgetLabel"] p { margin-bottom:.25rem; font-weight:700; color:#111827;}

      [data-testid="stForm"] {
      background: linear-gradient(135deg, var(--accent-weak) 0%, #fff 60%) }

      [data-testid="stFormSubmitButton"] > button:hover {
        background: #808080;
      }
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô) ----------
FEATURES = [
    "experience", "taste", "adventure", "style", "main_ing",
    "avoid", "texture", "fullness", "companion", "impression"
]

# ---------- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ----------
CHOICES = {
    "experience": ["‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢", "‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô", "‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô", "‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤", "‡∏™‡∏ö‡∏≤‡∏¢ ‡πÜ"],
    "taste": ["‡∏•‡∏∞‡∏°‡∏∏‡∏ô‡∏≠‡πà‡∏≠‡∏ô ‡πÜ", "‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°", "‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô", "‡πÄ‡∏ú‡πá‡∏î‡∏£‡πâ‡∏≠‡∏ô", "‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô"],
    "adventure": ["‡∏ä‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡πâ‡∏ô‡πÄ‡∏Ñ‡∏¢", "‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", "‡∏ä‡∏≠‡∏ö‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÅ‡∏õ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà"],
    "style": ["‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå"],
    "main_ing": ["‡∏õ‡∏•‡∏≤", "‡∏´‡∏≠‡∏¢", "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß", "‡∏ú‡∏±‡∏Å", "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á"],
    "avoid": ["‡πÅ‡∏û‡πâ", "‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏£‡∏™", "‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"],
    "texture": ["‡∏ô‡∏∏‡πà‡∏°‡∏•‡∏∞‡∏•‡∏≤‡∏¢", "‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏î", "‡∏´‡∏ô‡∏∂‡∏ö‡∏´‡∏ô‡∏±‡∏ö", "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á"],
    "fullness": ["‡πÄ‡∏ö‡∏≤ ‡πÜ", "‡∏û‡∏≠‡∏î‡∏µ", "‡∏≠‡∏¥‡πà‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà"],
    "companion": ["‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏ó‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô / ‡πÅ‡∏ü‡∏ô", "‡∏ó‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß / ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà"],
    "impression": ["‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏û‡∏£‡∏™‡πå", "‡∏õ‡∏£‡∏∞‡∏ì‡∏µ‡∏ï‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô", "‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à", "‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡πÉ‡∏ô‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥"],
}

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• + ‡πÄ‡∏°‡∏ó‡∏≤‡∏î‡∏≤‡∏ó‡∏≤ ----------
@st.cache_resource
def load_assets(model_path: Path, meta_path: Path):
    model = joblib.load(model_path)  # Pipeline(OneHotEncoder + RandomForest)
    meta = {}
    if meta_path.exists():
        with open(meta_path, "r", encoding="utf-8") as f:
            meta = json.load(f)
    return model, meta

BASE_DIR = Path(__file__).parent  # path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Streamlit (pages/)

MODEL_PATH = BASE_DIR / ".." / "omakase" / "omakase_model_ohe.pkl"
META_PATH  = BASE_DIR / ".." / "omakase" / "preprocess_metadata_ohe.json"

try:
    model, meta = load_assets(MODEL_PATH, META_PATH)
except Exception as e:
    st.error(
        f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}\n"
        "‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå omakase_model_ohe.pkl ‡πÅ‡∏•‡∏∞ preprocess_metadata_ohe.json ‡πÑ‡∏ß‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ"
    )
    st.stop()

# ---------- Metrics ‡∏à‡∏≤‡∏Å metadata ----------
cv_mean = meta.get("cv_accuracy_mean", None)
holdout = meta.get("holdout_accuracy", None)
TRAIN_ROWS = meta.get("training_rows", 100)

def pct(x):
    return f"{x*100:.2f}%" if x is not None else "‚Äî"

# ---------- helpers ----------
def apply_rare_mapping(row: dict, rare_map: dict):
    if not rare_map:
        return row
    out = dict(row)
    for col, rares in rare_map.items():
        if col in out and out[col] in set(rares):
            out[col] = "(‡∏≠‡∏∑‡πà‡∏ô‡πÜ)"
    return out

def get_classes_from_pipeline(pipeline):
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á classes_ ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ"""
    if hasattr(pipeline, "named_steps"):
        for name, step in reversed(list(pipeline.named_steps.items())):
            if hasattr(step, "classes_"):
                return step.classes_
    # fallback (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î)
    return getattr(pipeline, "classes_", None)

# ---------- HEADER ----------
st.markdown(
    '<div class="hero"><h1>üç£ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÇ‡∏≠‡∏°‡∏≤‡∏Å‡∏≤‡πÄ‡∏™‡∏∞</h1>'
    '<div class="subtitle">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</div></div>',
    unsafe_allow_html=True,
)

# KPI ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô
cA, cB, cC = st.columns(3)
with cA:
    st.markdown(
        '<div class="metric-card"><div class="label">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏£‡∏ô</div>'
        f'<div class="value">{TRAIN_ROWS} ‡∏Ñ‡∏ô</div></div>', unsafe_allow_html=True)
with cB:
    st.markdown(
        '<div class="metric-card"><div class="label">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (CV mean)</div>'
        f'<div class="value">{pct(cv_mean)}</div></div>', unsafe_allow_html=True)
with cC:
    st.markdown(
        '<div class="metric-card"><div class="label">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Holdout)</div>'
        f'<div class="value">{pct(holdout)}</div></div>', unsafe_allow_html=True)

# ---------- FORM (‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå) ----------

st.markdown(f"")

with st.form("omakase_form"):
    a = {}
    c1, c2 = st.columns(2, gap="large")

    with c1:
        a["experience"] = st.selectbox("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?", CHOICES["experience"], index=1)
    with c2:
        a["taste"] = st.selectbox("‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?", CHOICES["taste"], index=1)

    with c1:
        a["adventure"] = st.selectbox("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà ‡πÜ", CHOICES["adventure"], index=1)
    with c2:
        a["style"] = st.selectbox("‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á '‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°' ‡∏Å‡∏±‡∏ö '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå' ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô?", CHOICES["style"], index=0)

    with c1:
        a["main_ing"] = st.selectbox("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?", CHOICES["main_ing"], index=0, help="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏≠‡∏°‡∏≤‡∏Å‡∏≤‡πÄ‡∏™‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏•‡∏≤/‡∏´‡∏≠‡∏¢/‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß ‡∏Ø‡∏•‡∏Ø")
    with c2:
        a["avoid"] = st.selectbox("‡∏≠‡∏¢‡∏≤‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏∞‡πÑ‡∏£?", CHOICES["avoid"], index=1, help="‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏£‡∏™/‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

    with c1:
        a["texture"] = st.selectbox("‡∏ä‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©", CHOICES["texture"], index=0)
    with c2:
        a["fullness"] = st.selectbox("‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?", CHOICES["fullness"], index=1)

    with c1:
        a["companion"] = st.selectbox("‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏ó‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£?", CHOICES["companion"], index=1)
    with c2:
        a["impression"] = st.selectbox("‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‚Ä¶ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏ü‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?", CHOICES["impression"], index=4)

    cols = st.columns([1, 5])
    with cols[0]:
        submitted = st.form_submit_button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏£‡πå‡∏™", use_container_width=True)


# ---------- PREDICT & DISPLAY (‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° + accent) ----------
if submitted:
    rare_map = meta.get("rare_values", {})
    a_mapped = apply_rare_mapping(a, rare_map)
    X = pd.DataFrame([{k: a_mapped[k] for k in FEATURES}])

    try:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‚Ä¶"):
            pred = model.predict(X)[0]

        st.toast("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ú®", icon="‚úÖ")

        st.markdown(f"### ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì : **{pred}**")

        # ‡πÅ‡∏™‡∏î‡∏á Top-3 ‡πÄ‡∏õ‡πá‡∏ô badge + ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°
        if hasattr(model, "predict_proba"):
            proba = model.predict_proba(X)[0]
            classes = get_classes_from_pipeline(model)
            if classes is not None:
                prob_df = pd.DataFrame({"‡∏Ñ‡∏≠‡∏£‡πå‡∏™": classes, "prob": proba}).sort_values("prob", ascending=False)
                top3 = prob_df.head(3).copy()
                top3["pct"] = (top3["prob"]*100).round(2).astype(str) + "%"

                # Badge ‡πÅ‡∏™‡∏î‡∏á Top-3
                badge_html = "<div class='badges'>" + "".join(
                    [f"<span class='badge'><span class='dot'></span>{r['‡∏Ñ‡∏≠‡∏£‡πå‡∏™']} <span class='hint'>{r['pct']}</span></span>"
                     for _, r in top3.iterrows()]
                ) + "</div>"
                st.markdown("<div class='section-title'>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô ‡πÜ</div>", unsafe_allow_html=True)
                st.markdown(badge_html, unsafe_allow_html=True)

                # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢)
                show_df = prob_df.rename(columns={"prob":"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"})
                show_df["‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"] = (show_df["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"]*100).map(lambda x: f"{x:.2f}%")
                show_df = show_df.drop(columns=["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"]).reset_index(drop=True)

                st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
                st.markdown("<div class='section-title'>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•</div>", unsafe_allow_html=True)
                st.dataframe(show_df, use_container_width=True)

        # ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏°‡πÄ‡∏î‡∏•
        st.markdown(
            f"üìä ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• **{TRAIN_ROWS} ‡∏Ñ‡∏ô** ‚Äî "
            f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (CV mean): {pct(cv_mean)}**, "
            f"**Holdout: {pct(holdout)}**"
        )

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (JSON)
        result_payload = {
            "inputs": a, "inputs_mapped": a_mapped, "prediction": str(pred),
            "meta": {
                "train_rows": TRAIN_ROWS,
                "cv_accuracy_mean": cv_mean,
                "holdout_accuracy": holdout
            }
        }
        buf = StringIO()
        json.dump(result_payload, buf, ensure_ascii=False, indent=2)
        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (JSON)",
            data=buf.getvalue().encode("utf-8"),
            file_name=f"omakase_recommend_{str(pred)}.json",
            mime="application/json",
            use_container_width=True
        )

        st.markdown('</div>', unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (ITE-436)")
